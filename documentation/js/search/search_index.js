var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.893,1,2.984,2,1.4,3,0.507,4,0.507,5,0.436,6,3.188,7,0.63,8,0.039,9,0.929,10,2.581,11,3.188,12,3.873,13,3.873,14,3.873,15,3.873,16,3.873,17,0.507,18,0.025,19,2.401,20,1.716,21,0.031,22,0.031]],["title/modules/AppModule.html",[23,0.98,24,1.858]],["body/modules/AppModule.html",[1,2.832,2,1.447,3,0.382,4,0.382,5,0.329,7,0.695,8,0.039,9,0.701,10,2.62,11,2.406,17,0.382,18,0.019,21,0.026,22,0.026,23,1.493,24,3.59,25,1.295,26,1.169,27,1.609,28,1.609,29,1.295,30,2.251,31,1.609,32,2.406,33,2.406,34,2.406,35,2.62,36,2.927,37,2.356,38,2.205,39,1.609,40,1.609,41,2.923,42,2.483,43,2.923,44,2.923,45,2.923,46,2.923]],["title/injectables/AppService.html",[10,1.477,47,1.083]],["body/injectables/AppService.html",[3,0.507,4,0.507,5,0.436,7,0.507,8,0.038,9,0.929,10,2.372,17,0.507,18,0.025,21,0.031,22,0.031,47,1.74,48,2.132,49,3.188,50,0.833,51,2.372,52,5.479,53,1.144,54,3.873,55,1.908,56,1.925,57,1.908,58,3.873,59,3.873]],["title/controllers/AuthController.html",[0,1.083,60,1.858]],["body/controllers/AuthController.html",[0,1.436,2,1.436,3,0.52,4,0.52,5,0.447,7,0.64,8,0.039,9,0.953,17,0.52,18,0.026,19,2.463,20,1.761,21,0.032,22,0.032,60,3.032,61,3.271,62,2.809,63,3.271,64,2.348,65,3.271,66,3.974]],["title/modules/AuthModule.html",[23,0.98,35,1.477]],["body/modules/AuthModule.html",[2,1.54,3,0.419,4,0.419,5,0.361,7,0.668,8,0.038,9,0.769,17,0.419,18,0.021,21,0.028,22,0.028,23,1.565,25,1.421,26,1.282,27,1.764,28,1.764,29,1.421,30,2.359,31,2.636,35,2.747,37,1.889,38,2.346,39,1.764,40,1.764,42,1.987,60,2.968,64,2.605,65,2.639,67,2.639,68,2.639,69,2.639,70,3.205,71,2.642,72,3.205,73,2.639]],["title/injectables/AuthService.html",[47,1.083,64,1.329]],["body/injectables/AuthService.html",[3,0.371,4,0.371,5,0.319,7,0.513,8,0.039,9,0.68,17,0.371,18,0.018,20,1.257,21,0.025,22,0.025,47,1.417,48,1.561,50,0.61,51,1.932,53,1.328,55,1.932,56,2.262,57,1.932,64,1.738,71,1.758,74,2.335,75,2.9,76,3.994,77,4.497,78,2.431,79,2.335,80,2.159,81,2.836,82,2.159,83,2.159,84,1.158,85,1.568,86,2.836,87,2.836,88,3.922,89,3.702,90,2.475,91,2.836,92,2.004,93,2.004,94,2.335,95,2.335,96,2.004,97,2.004,98,1.397,99,2.836,100,2.836,101,2.335]],["title/classes/CreatePostDto.html",[18,0.019,102,1.477]],["body/classes/CreatePostDto.html",[3,0.159,4,0.159,5,0.137,7,0.487,8,0.038,17,0.159,18,0.017,21,0.013,22,0.013,50,0.261,53,1.318,56,1.982,84,1.503,85,1.878,101,2.54,102,1.003,103,0.537,104,3.243,105,0.857,106,1.053,107,3.259,108,2.633,109,3.085,110,3.42,111,2.633,112,3.439,113,3.959,114,1.861,115,3.439,116,3.259,117,1.978,118,3.085,119,2.01,120,2.303,121,1.212,122,1.212,123,2.037,124,2.037,125,2.037,126,2.037,127,1.212,128,1.212,129,1.912,130,1.212,131,1.677,132,2.54,133,1.677,134,2.037,135,1.212,136,1.212,137,1.212,138,2.037,139,3.085,140,3.085,141,1.263,142,1.677,143,1.212,144,1.212,145,3.085,146,2.037,147,2.037,148,2.037,149,2.037,150,1.212,151,1.212,152,1.212,153,2.037,154,1.212,155,1.212,156,2.037,157,3.085,158,3.085,159,3.085,160,3.085,161,1.212,162,3.085,163,3.085,164,1.677,165,2.633,166,1.212,167,2.831,168,1.677,169,1.677,170,1.677,171,1.212,172,1.212,173,0.998,174,3.155,175,1.212,176,1.212,177,3.085,178,1.212,179,1.212,180,1.212,181,2.633,182,1.212,183,2.633,184,2.037,185,2.132,186,2.798,187,2.632,188,2.037,189,0.998,190,0.998,191,2.037,192,0.597,193,1.212,194,1.212,195,0.752,196,1.44,197,1.212,198,0.857,199,2.831,200,3.259,201,0.597,202,1.212,203,2.037,204,0.998,205,1.212,206,1.212,207,0.998,208,1.212,209,1.212,210,1.212,211,1.212,212,1.212,213,1.212,214,1.212,215,1.212,216,0.998,217,1.677,218,2.168,219,0.998,220,1.212,221,1.212,222,1.861,223,1.212,224,1.212,225,1.212,226,1.212]],["title/classes/CreatePostMetaOptionDto.html",[18,0.019,129,1.858]],["body/classes/CreatePostMetaOptionDto.html",[3,0.456,4,0.456,5,0.392,7,0.456,8,0.038,17,0.456,18,0.029,21,0.029,22,0.029,50,0.749,53,1.329,56,1.8,84,1.329,103,1.544,104,3.525,106,1.8,117,1.995,119,1.994,129,2.79,185,3.383,187,3.525,192,1.716,196,3.525,218,4.105,222,3.525,227,2.868,228,3.484,229,3.484,230,3.484]],["title/classes/CreateUserDto.html",[18,0.019,231,1.65]],["body/classes/CreateUserDto.html",[3,0.351,4,0.351,5,0.302,7,0.351,8,0.038,17,0.351,18,0.024,21,0.024,22,0.024,50,0.578,53,1.399,56,2.172,84,1.399,89,3.596,92,3.087,103,1.19,106,1.51,117,2.1,164,3.109,185,2.938,186,2.67,187,3.529,189,2.211,190,2.211,192,1.323,216,3.109,231,2.079,232,4.111,233,2.211,234,3.596,235,4.368,236,2.686,237,2.686,238,2.686,239,2.686,240,2.686,241,2.686,242,2.686,243,3.777,244,3.777,245,3.777,246,3.777,247,3.777,248,4.263,249,3.777,250,2.079,251,3.777,252,3.777,253,2.686,254,3.777,255,2.686,256,3.777,257,2.686,258,2.686]],["title/classes/GetUsersParamDto.html",[18,0.019,259,1.65]],["body/classes/GetUsersParamDto.html",[3,0.43,4,0.43,5,0.37,7,0.634,8,0.039,17,0.43,18,0.031,21,0.028,22,0.028,50,0.707,53,0.971,84,1.432,85,1.733,90,3.029,98,2.136,103,1.457,106,1.733,117,1.457,120,1.457,173,2.707,174,3.064,186,3.064,192,1.62,198,2.324,200,3.569,201,1.62,250,2.838,259,2.386,260,3.569,261,2.687,262,2.707,263,3.288,264,3.288,265,3.569,266,3.288,267,3.288]],["title/classes/PatchPostDto.html",[18,0.019,268,1.858]],["body/classes/PatchPostDto.html",[3,0.43,4,0.43,5,0.37,7,0.674,8,0.038,17,0.43,18,0.028,21,0.028,22,0.028,50,0.707,53,0.971,84,0.971,90,2.95,102,1.62,103,1.457,105,2.324,106,1.939,117,1.457,119,1.733,185,2.687,192,1.62,195,2.038,199,3.569,201,1.62,250,2.386,265,3.569,268,2.687,269,3.569,270,3.569,271,4.335,272,3.288,273,4.335,274,3.288,275,3.288,276,3.569,277,4.335,278,3.288,279,2.324,280,3.288,281,2.707]],["title/classes/PatchUsersDto.html",[18,0.019,282,1.858]],["body/classes/PatchUsersDto.html",[3,0.507,4,0.507,5,0.436,7,0.63,8,0.039,17,0.507,18,0.025,21,0.031,22,0.031,85,1.549,103,1.716,106,1.549,195,2.401,231,2.132,270,3.963,276,3.963,282,2.984,283,3.188,284,3.188,285,4.814,286,3.188,287,3.188,288,3.188,289,3.873,290,3.873]],["title/controllers/PostsController.html",[0,1.083,291,1.858]],["body/controllers/PostsController.html",[0,0.759,2,0.759,3,0.275,4,0.275,5,0.237,7,0.592,8,0.039,9,0.504,17,0.275,18,0.014,19,1.303,20,0.931,21,0.02,22,0.02,50,0.452,51,1.556,53,1.121,55,1.87,56,1.688,57,1.87,62,1.485,75,2.857,82,2.089,83,2.089,84,1.121,85,1.518,102,2.342,114,2.233,117,1.682,119,2.029,120,1.871,201,1.035,268,2.947,279,2.233,281,1.73,291,1.958,292,1.73,293,2.101,294,2.6,295,3.159,296,3.159,297,1.73,298,3.159,299,2.101,300,1.958,301,3.475,302,3.159,303,3.159,304,3.159,305,3.475,306,2.101,307,2.101,308,2.101,309,3.159,310,2.101,311,2.6,312,2.101,313,3.159,314,3.159,315,2.6,316,2.101,317,2.101,318,1.73,319,1.485,320,3.125,321,1.87,322,1.73,323,3.125,324,3.125,325,1.73,326,1.485,327,1.73,328,2.101,329,2.101,330,2.101,331,2.101,332,2.101,333,3.159,334,2.101,335,2.101,336,2.101,337,2.101,338,2.101,339,2.101,340,1.73]],["title/modules/PostsModule.html",[23,0.98,36,1.65]],["body/modules/PostsModule.html",[2,1.494,3,0.401,4,0.401,5,0.345,7,0.705,8,0.038,9,0.735,17,0.401,18,0.02,21,0.027,22,0.027,23,1.71,25,1.358,26,1.225,27,1.686,28,1.686,29,1.358,30,2.469,31,1.686,36,3.086,37,2.39,38,2.276,39,1.686,40,1.686,42,2.563,73,2.522,291,2.902,321,2.657,322,2.522,341,2.522,342,3.064,343,2.522,344,3.064,345,3.064,346,4.135,347,3.064,348,2.923,349,3.064,350,3.064,351,3.064,352,3.064]],["title/injectables/PostsService.html",[47,1.083,321,1.477]],["body/injectables/PostsService.html",[3,0.341,4,0.341,5,0.293,7,0.611,8,0.039,9,0.624,17,0.341,18,0.017,19,1.614,20,1.154,21,0.024,22,0.024,23,0.851,47,1.335,48,1.433,50,0.56,51,1.82,53,1.268,55,1.82,56,1.869,57,1.82,75,2.364,78,1.614,80,1.869,82,2.364,83,2.364,84,1.268,85,1.717,94,2.143,97,1.84,98,2.431,102,2.431,107,3.041,116,3.535,119,1.973,279,1.84,294,3.041,297,3.041,300,1.614,311,2.143,321,1.82,326,1.84,340,2.143,353,2.143,354,3.041,355,2.603,356,2.603,357,3.694,358,2.603,359,3.694,360,2.603,361,2.603,362,2.603,363,2.143,364,2.603,365,3.694,366,3.694,367,2.603]],["title/controllers/UsersController.html",[0,1.083,368,1.858]],["body/controllers/UsersController.html",[0,0.579,2,0.579,3,0.21,4,0.21,5,0.18,7,0.556,8,0.039,9,0.384,17,0.21,18,0.01,20,0.71,21,0.017,22,0.017,50,0.345,51,1.261,53,0.944,55,1.575,57,1.966,62,1.133,75,2.632,78,0.993,80,1.46,82,1.759,83,2.196,84,1.319,85,1.595,90,1.409,93,1.133,96,1.133,98,1.261,114,1.133,117,1.416,119,1.278,120,1.885,132,3.285,133,3.005,141,2.875,174,2.58,195,0.993,201,0.789,231,2.632,250,2.888,259,2.342,261,2.473,282,2.875,288,1.319,300,1.587,305,1.319,315,2.107,318,2.631,319,2.259,320,2.631,323,2.107,324,2.107,325,1.319,326,1.133,327,1.319,368,1.587,369,1.319,370,3.196,371,3.196,372,2.56,373,1.602,374,1.602,375,1.602,376,3.502,377,1.602,378,2.56,379,2.56,380,2.56,381,1.602,382,2.56,383,1.602,384,2.56,385,2.56,386,2.107,387,3.196,388,1.602,389,2.56,390,3.196,391,2.56,392,2.56,393,1.602,394,1.602,395,1.602,396,1.602,397,1.602,398,1.602,399,1.602,400,3.65,401,1.602,402,1.602,403,1.319,404,1.319,405,1.602,406,1.319,407,3.196,408,1.602,409,1.602,410,1.602,411,1.602,412,1.602,413,1.602,414,1.602,415,1.602,416,2.56,417,1.602,418,1.602,419,1.602,420,1.602,421,1.602,422,1.602,423,1.602,424,1.602,425,1.602,426,1.602,427,1.602,428,1.602,429,1.602,430,1.602,431,1.602,432,1.602,433,1.602,434,1.602,435,1.602,436,1.319,437,1.602]],["title/modules/UsersModule.html",[23,0.98,37,1.329]],["body/modules/UsersModule.html",[2,1.425,3,0.374,4,0.374,5,0.322,7,0.637,8,0.039,9,0.685,17,0.374,18,0.018,21,0.025,22,0.025,23,1.768,25,1.747,26,1.142,27,1.573,28,1.573,29,1.266,30,2.516,31,2.485,35,1.942,37,2.398,38,2.17,39,1.573,40,1.573,42,1.771,63,2.352,71,2.444,80,2.307,98,2.224,348,2.02,363,2.352,368,2.799,406,2.352,438,2.352,439,2.352,440,2.352,441,2.857,442,2.857,443,2.857,444,2.857,445,2.857,446,2.857,447,2.857,448,2.857,449,2.857,450,2.857,451,2.857,452,2.857,453,2.857,454,2.857]],["title/injectables/UsersService.html",[47,1.083,80,1.199]],["body/injectables/UsersService.html",[3,0.223,4,0.223,5,0.192,7,0.436,8,0.039,9,0.409,17,0.223,18,0.022,20,0.756,21,0.017,22,0.017,26,1.076,30,0.841,47,1.204,48,0.939,50,0.367,51,1.326,53,0.984,55,1.863,56,1.748,57,1.326,64,1.938,71,1.058,75,2.407,76,1.405,78,2.344,79,1.405,80,1.645,82,2.265,83,1.834,84,0.984,85,1.332,90,2.75,92,1.902,93,2.355,95,1.405,96,1.206,97,1.206,98,2.462,120,1.676,131,2.742,141,2.94,217,2.742,234,3.113,248,2.215,250,2.893,259,2.611,261,3.025,319,2.909,348,1.902,354,2.742,376,3.113,386,2.215,403,1.405,404,1.405,455,1.405,456,2.691,457,2.215,458,2.691,459,2.691,460,2.691,461,2.691,462,1.706,463,3.781,464,2.691,465,1.706,466,1.706,467,3.781,468,3.781,469,2.691,470,4.372,471,2.691,472,2.691,473,1.706,474,2.691,475,2.691,476,1.706,477,1.706,478,1.706,479,1.706,480,1.706,481,2.691,482,1.706,483,1.706,484,1.706,485,1.706]],["title/coverage.html",[486,3.355]],["body/coverage.html",[0,1.751,1,1.751,5,0.318,6,2.326,8,0.038,10,1.392,18,0.034,21,0.025,22,0.025,29,1.252,47,1.751,49,2.326,60,1.751,61,2.326,64,1.252,74,2.326,80,1.13,84,0.834,102,1.392,104,2.765,105,2.765,119,1.13,129,1.751,196,1.997,219,2.326,227,2.326,231,1.555,232,2.326,233,2.326,259,1.555,260,2.326,261,1.751,262,2.326,268,1.751,269,2.326,282,1.751,283,2.326,284,2.326,291,1.751,292,2.326,300,1.751,321,1.392,353,2.326,368,1.751,369,2.326,455,2.326,457,2.326,486,2.326,487,2.825,488,2.825,489,5.837,490,4.844,491,4.488,492,4.844,493,2.326,494,2.825,495,2.825,496,2.825,497,2.825,498,2.825,499,2.825,500,2.825]],["title/dependencies.html",[26,1.44,501,2.068]],["body/dependencies.html",[8,0.039,9,0.924,18,0.031,21,0.031,22,0.031,26,1.541,192,1.898,198,2.724,201,1.898,286,3.172,287,3.172,436,3.172,502,3.853,503,3.853,504,5.226,505,3.853,506,3.853,507,3.853,508,3.853,509,3.853,510,3.853,511,3.853,512,3.853,513,3.853,514,3.853,515,3.853]],["title/miscellaneous/enumerations.html",[516,1.557,517,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,21,0.03,22,0.03,50,0.8,110,3.865,119,1.877,141,2.911,142,3.865,167,3.865,168,3.865,169,3.865,170,3.865,204,3.865,207,3.865,222,4.129,516,2.307,517,3.064,518,3.722,519,3.722,520,3.722,521,3.722]],["title/miscellaneous/functions.html",[516,1.557,522,2.965]],["body/miscellaneous/functions.html",[8,0.034,21,0.034,22,0.034,29,2.474,50,0.965,493,3.695,516,2.782,522,3.695,523,4.488]],["title/index.html",[50,0.54,524,2.512,525,2.512]],["body/index.html",[8,0.034,21,0.034,22,0.034,120,2.013,301,3.739,526,4.542,527,4.542,528,4.542,529,4.542]],["title/modules.html",[25,1.806]],["body/modules.html",[8,0.033,21,0.033,22,0.033,24,2.585,25,1.848,35,2.054,36,2.295,37,1.848,530,5.621,531,5.621,532,5.621,533,5.621]],["title/overview.html",[534,3.355]],["body/overview.html",[2,1.09,8,0.038,10,2.287,21,0.026,22,0.026,23,0.985,24,3.548,25,1.336,26,1.206,27,1.66,28,1.66,29,1.336,30,1.486,31,1.66,32,2.482,33,2.482,34,2.482,35,2.644,36,3.022,37,2.433,38,2.252,39,1.66,40,1.66,48,1.66,64,2.433,67,2.482,68,2.482,69,2.482,80,2.195,103,1.336,321,2.287,341,2.482,343,2.482,438,2.482,439,2.482,440,2.482,534,2.482,535,4.643,536,3.015]],["title/properties.html",[106,1.44,501,2.068]],["body/properties.html",[8,0.038,21,0.034,22,0.034,106,1.764,120,1.955,537,4.41,538,4.41,539,4.41,540,4.41,541,4.41]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":538,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t00:00:00.000z",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.25",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["10})@apiquery({name",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":266,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["123})@isoptional()@isint()@type(undefined",{"_index":263,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2.0.5",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["2022",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":535,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":536,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["a@a.com",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{}}}],["action",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["add",{"_index":278,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["adds",{"_index":367,"title":{},"body":{"injectables/PostsService.html":{}}}],["alice",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["amail",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{}}}],["api",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":272,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({example",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":526,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["application'})@apiresponse({status",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["appmodule",{"_index":24,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"modules/UsersModule.html":{}}}],["auth.controller",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":60,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":541,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":64,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":452,"title":{},"body":{"modules/UsersModule.html":{}}}],["between",{"_index":454,"title":{},"body":{"modules/UsersModule.html":{}}}],["blog",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["body",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":533,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":530,"title":{},"body":{"modules.html":{}}}],["business",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["cantrols",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["character",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["circular",{"_index":453,"title":{},"body":{"modules/UsersModule.html":{}}}],["class",{"_index":18,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":341,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":342,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":343,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":438,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":439,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":440,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["compodoc/compodoc",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["components",{"_index":450,"title":{},"body":{"modules/UsersModule.html":{}}}],["connect",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createuserdto",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauthenticated",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["constructor(userservice",{"_index":355,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(usersservice",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["content",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":267,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["coverage",{"_index":486,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/UsersController.html":{}}}],["created",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["created.'})@post",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":102,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":129,"title":{"classes/CreatePostMetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["creates",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":231,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUsersDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{}}}],["dashes",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dashes'})@isstring()@isnotempty()@matches(/^[a",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["database",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dd",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorated",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["decorators",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":26,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":363,"title":{},"body":{"injectables/PostsService.html":{},"modules/UsersModule.html":{}}}],["description",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["description:'the",{"_index":280,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["documentation",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["draft",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/create",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["each",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eight",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoints",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["entire",{"_index":346,"title":{},"body":{"modules/PostsModule.html":{}}}],["entries",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":517,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["existing",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["export",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exported",{"_index":351,"title":{},"body":{"modules/PostsModule.html":{}}}],["exports",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":270,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{}}}],["false",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filtering",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":354,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":359,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":365,"title":{},"body":{"injectables/PostsService.html":{}}}],["firstname",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["forwardref",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["function",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":522,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":52,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":524,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(getusersparamdto",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":259,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["group",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["headers",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":58,"title":{},"body":{"injectables/AppService.html":{}}}],["http://localhost:8000/users",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["https://example.com/image.jpg",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["importing",{"_index":349,"title":{},"body":{"modules/PostsModule.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":50,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":47,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["instanceof",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["instead",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["inter",{"_index":362,"title":{},"body":{"injectables/PostsService.html":{}}}],["ip",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":265,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isoptional",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":228,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["isstring()@isnotempty()@isemail",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(40",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(40",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["itself",{"_index":350,"title":{},"body":{"modules/PostsModule.html":{}}}],["j@j.com",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["jane",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["john",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["key",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{}}}],["key1",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["lastname",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["legend",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":539,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["list",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["local",{"_index":449,"title":{},"body":{"modules/UsersModule.html":{}}}],["localhost:8000/posts",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["localhost:8000/posts/:userid",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["lowercase",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["make",{"_index":290,"title":{},"body":{"classes/PatchUsersDto.html":{}}}],["makes",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["management",{"_index":445,"title":{},"body":{"modules/UsersModule.html":{}}}],["matches",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(40",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["means",{"_index":446,"title":{},"body":{"modules/UsersModule.html":{}}}],["mechanism",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["message",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["metadata",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":516,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mm",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["module",{"_index":23,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":25,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["needs",{"_index":273,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nestjs",{"_index":529,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":286,"title":{},"body":{"classes/PatchUsersDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["now",{"_index":451,"title":{},"body":{"modules/UsersModule.html":{}}}],["number",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["numbers",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["objects",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["one",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["operations",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option.dto",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option.dto.ts",{"_index":227,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["option.dto.ts:11",{"_index":230,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["option.dto.ts:7",{"_index":229,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["optional",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":534,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":501,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pair",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["param",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":262,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":264,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":276,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{}}}],["partialtype(createpostdto",{"_index":271,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":285,"title":{},"body":{"classes/PatchUsersDto.html":{}}}],["particular",{"_index":448,"title":{},"body":{"modules/UsersModule.html":{}}}],["paseintpipe",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["pass",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":268,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchusersdto",{"_index":282,"title":{"classes/PatchUsersDto.html":{}},"body":{"classes/PatchUsersDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["perform",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["position",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isiso8601()@isoptional",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isoptional()@isurl",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isoptional",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isoptional()@isjson",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":279,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:113",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:14",{"_index":275,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:17",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:25",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:42",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:50",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:67",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:75",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:86",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":345,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":291,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":36,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":321,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":361,"title":{},"body":{"injectables/PostsService.html":{}}}],["project",{"_index":527,"title":{},"body":{"index.html":{}}}],["properties",{"_index":106,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"properties.html":{}}}],["property",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["providers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providing",{"_index":447,"title":{},"body":{"modules/UsersModule.html":{}}}],["public",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["put",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["receives",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["record",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{}}}],["reflect",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["req",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["required",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["responsible",{"_index":444,"title":{},"body":{"modules/UsersModule.html":{}}}],["results",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieve",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["return",{"_index":57,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":55,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["review'})@isenum(poststatus)@isnotempty",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["routing",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["rxjs",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["scheduled",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["second",{"_index":366,"title":{},"body":{"injectables/PostsService.html":{}}}],["serialized",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series'})@isenum(posttype)@isnotempty",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["service",{"_index":348,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["slug",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUsersDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":347,"title":{},"body":{"modules/PostsModule.html":{}}}],["specified",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/.../main.ts",{"_index":523,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":518,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":519,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":49,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":443,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":493,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":269,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":520,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":521,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:15",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:29",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:43",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":344,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:12",{"_index":360,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:31",{"_index":358,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:7",{"_index":356,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":260,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":283,"title":{},"body":{"classes/PatchUsersDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:27",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:52",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:43",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:53",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":441,"title":{},"body":{"modules/UsersModule.html":{}}}],["started",{"_index":525,"title":{"index.html":{}},"body":{}}],["statements",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["story",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":56,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiquery({name",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary:'creates",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary:'updates",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["support",{"_index":531,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":532,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":277,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["table",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag3",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findonebyid(userid",{"_index":364,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.isauthenticated",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{}}}],["title",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["transformer",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":287,"title":{},"body":{"classes/PatchUsersDto.html":{},"dependencies.html":{}}}],["t{\"type\":\"object",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["t{\\\"type\\\":\\\"object",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["under",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["unlicensed",{"_index":540,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":281,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":274,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated.'})@patch",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["updateuser",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(@body",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(patchusersdto",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["used",{"_index":289,"title":{},"body":{"classes/PatchUsersDto.html":{}}}],["user",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":288,"title":{},"body":{"classes/PatchUsersDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:20",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["usermodule",{"_index":352,"title":{},"body":{"modules/PostsModule.html":{}}}],["users",{"_index":261,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":442,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":284,"title":{},"body":{"classes/PatchUsersDto.html":{},"coverage.html":{}}}],["users/users.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":368,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{}}}],["usersmodule",{"_index":37,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":80,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["validate",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["validatenested",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"miscellaneous/enumerations.html":{}}}],["value1",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["values",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":537,"title":{},"body":{"properties.html":{}}}],["want",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["world",{"_index":59,"title":{},"body":{"injectables/AppService.html":{}}}],["written",{"_index":528,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z0",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z])(?=.*[a",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/* The routing mechanism cantrols which controller receives the request */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {} //\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) { }\n  \n\n  \n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService} from './providers/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService) { }\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n    //login\n    return 'SAMPLE_TOKEN';\n\n\n  }\n\n  public isAuthenticated() {\n    return true;\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'This is my post content', description: 'The content of the post'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'https://example.com/image.jpg', description: 'The featured image url of the post'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'possible values: post, page, story, series'})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '2022-01-01T00:00:00.000Z', description: 'The publish date of the post'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'T{\"type\":\"object\"}', description: 'serialized schema of the post'})@IsString()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'my-post-slug', description: 'only contain lowercase letters, numbers, and dashes'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug can only contain lowercase letters, numbers, and dashes'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'possible values: draft, published, scheduled, review'})@IsEnum(PostStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The tags of the post', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is my post title', description: 'The title of the post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsISO8601, isISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MinLength, ValidateNested } from \"class-validator\";\nimport { PostStatus } from \"../enums/postStatus.enum\";\nimport { PostType } from \"../enums/postType.enum\";\nimport { CreatePostMetaOptionDto } from \"./create-post-meta-option.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n\n  @ApiProperty({\n    example: 'This is my post title',\n    description: 'The title of the post',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: 'possible values: post, page, story, series',\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType\n\n  @ApiProperty({\n    example: 'my-post-slug',\n    description: 'only contain lowercase letters, numbers, and dashes',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, { message: 'A slug can only contain lowercase letters, numbers, and dashes' })\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: 'possible values: draft, published, scheduled, review',\n  })\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    example: 'This is my post content',\n    description: 'The content of the post',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    example: 'T{\\\"type\\\":\\\"object\\\"}',\n    description: 'serialized schema of the post',\n  })\n  @IsString()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    example: 'https://example.com/image.jpg',\n    description: 'The featured image url of the post',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    example: '2022-01-01T00:00:00.000Z',\n    description: 'The publish date of the post',\n  })\n  @IsISO8601() // YYYY-MM-DD\n  @IsOptional()\n  publishOn?: Date;\n\n  \n  @ApiPropertyOptional({\n    description: 'The tags of the post',\n    example: ['tag1', 'tag2', 'tag3'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description: 'The key can be string identifier for your meta option',\n          example: 'key1',\n        },\n        value: {\n          type: 'string',\n          description: 'The value can be any type',\n          example: 'value1',\n        }\n      },\n    }\n  \n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionDto)\n  metaOptions?: CreatePostMetaOptionDto[];// this is not required property but when you pass metaOptions the key value pair is required object\n  \n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionDto.html":{"url":"classes/CreatePostMetaOptionDto.html","title":"class - CreatePostMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-option.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-option.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-option.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, isNotEmpty, IsString, isString } from \"class-validator\";\n\nexport class CreatePostMetaOptionDto {\n\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n  \n  \n  @IsNotEmpty()\n  value: any;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(40)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(40)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)  \n  @MaxLength(40)\n  firstName: string;\n  \n  @IsString()\n  @IsOptional()\n  @MinLength(3)  \n  @MaxLength(40)\n  lastName: string;\n  \n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n  \n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, { message: 'Minimum eight characters, at least one letter, one number and one special character' })\n  password: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The id of the user', example: 123})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {  IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'The id of the user',\n    example: 123\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)  // to convert id number\n  id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The Id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\"; // why we import PartialType from swagger is  to add all properties in swagger\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\n\nexport class PatchPostDto extends PartialType(CreatePostDto){ \n\n  @ApiProperty({\n    description:'The Id of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUsersDto.html":{"url":"classes/PatchUsersDto.html","title":"class - PatchUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUsersDto extends PartialType(CreateUserDto) { }\n\n/* PartialType is used to make all properties optional  */\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new  blog post'})@ApiResponse({status: 201, description: 'The record has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'The post has been successfully updated.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) { }\n  \n\n  //! GET localhost:8000/posts/:userId\n  @Get(':userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n  \n\n  //! POST localhost:8000/posts/\n  @ApiOperation({\n    summary:'Creates a new  blog post'\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'The record has been successfully created.',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    return this.postsService.createPost(createPostDto);\n  }\n\n\n  //! PATCH localhost:8000/posts\n  @ApiOperation({\n    summary:'Updates an existing blog post'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully updated.',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return 'This action updates a post';\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule], // import the entire module not specific service, importing the entire module would import the service itself - only providers exported from usermodule\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createPost\n                        \n                    \n                \n            \n            \n                \ncreatePost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { title } from 'process';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\n\n@Injectable()\nexport class PostsService {\n\n  \n  constructor(private readonly userService: UsersService){} // it is a inter-module dependency \n\n  public findAll(userId: string) {\n    \n    const user = this.userService.findOneById(userId);\n    \n    return [\n      {\n        user: user,\n        title: 'My first post',\n        content: 'This is my first post'\n      },\n      {\n        user: user,\n        title: 'My second post',\n        content: 'This is my second post'\n      }\n    ]\n    \n  }\n\n  createPost(createPostDto: CreatePostDto) {\n    return 'This action adds a new post';\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUser\n                            \n                            \n                                    \n                                    Public\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreateUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'User fetched successfully'})@ApiQuery({name: 'limit', required: false, type: 'number', description: 'number of entries returned per query', example: 10})@ApiQuery({name: 'page', required: false, type: 'number', description: 'the position of the page number that you want the API return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(patchUsersDto: PatchUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUsersDto\n                                            \n                                                            PatchUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUsersDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Patch, Delete, Put, Param, Query, Body, Headers, Ip, ParseIntPipe, DefaultValuePipe, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUsersDto } from './dtos/patch-users.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// http://localhost:8000/users\n@Controller('users')\n@ApiTags('Users') // all the endpoints related to users would come under this group\nexport class UsersController {\n  constructor(\n    // inject UsersService\n    private readonly usersService: UsersService,\n  ) {}\n    /*\n    when we use ParseIntPipe, we are not able to validate an optional param (id),\n    using PaseIntPipe makes this id a required param BUT we want it to be optional so we can create\n     DTO for this\n    */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n    @ApiResponse({\n      status: 200,\n      description: 'User fetched successfully',\n    })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: 'number',\n    description: 'number of entries returned per query',\n    example: 10\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: 'number',\n    description: 'the position of the page number that you want the API return',\n    example: 1\n  })\n  public getUser(\n    @Param('id') getUsersParamDto : GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n\n  @Post()\n  public createUsers(\n    @Body() createUserDto: CreateUserDto)\n  {\n    console.log(createUserDto instanceof CreateUserDto); \n    return createUserDto;\n  }\n  // instead of @Body() we can use @Req() from express\n\n\n  @Patch()\n  public updateUser(@Body() patchUsersDto: PatchUsersDto) {\n    return patchUsersDto;\n  }\n\n  \n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n/* user module is responsible for all the management of the providers*/\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService], // providers means providing this particular service to all the local components of user module\n  exports: [UsersService], // now available to other modules\n  imports: [forwardRef(() => AuthModule)], // circular dependency between auth module and user module\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor to inject dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service to check user authentication.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:27\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe parameters for filtering users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of users to retrieve per page.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                An array of user objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:52\n                        \n                    \n\n\n            \n                \n                        The method to get one user from the database by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; amail: string; }\n\n                        \n                            \n                                The user object with the specified ID.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable() // All providers must be decorated with @Injectable\nexport class UsersService {\n\n  /**\n   * Constructor to inject dependencies.\n   * @param {AuthService} usersService - The authentication service to check user authentication.\n   */\n  constructor(\n     @Inject(forwardRef(() => AuthService))\n     private readonly usersService: AuthService){ }\n\n\n  /**\n   * The method to get all users from the database.\n   * @param {GetUsersParamDto} getUsersParamDto - The parameters for filtering users.\n   * @param {number} limit - The number of users to retrieve per page.\n   * @param {number} page - The page number to retrieve.\n   * @returns {Array} An array of user objects.\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number\n  ) {\n    const isAuthenticated = this.usersService.isAuthenticated();\n    console.log(isAuthenticated);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'j@j.com'\n      },\n      {\n        firstName: 'Jane',\n        email: 'j@j.com'\n      }\n    ]\n  }\n\n  /**\n   * The method to get one user from the database by ID.\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Object} The user object with the specified ID.\n   */\n  public findOneById(id: string) {\n    return {\n      id: 1234,\n      firstName: 'Alice',\n      amail: 'a@a.com'\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-option.dto.ts\n            \n            class\n            CreatePostMetaOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-users.dto.ts\n            \n            class\n            PatchUsersDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : PAGE\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nBlog App, which is project written in nestjs, \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
